// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Balances } from "./resources/balances.mjs";
import { Me } from "./resources/me.mjs";
import { Payments, } from "./resources/payments.mjs";
import { SpendLimits } from "./resources/spend-limits.mjs";
import { Version } from "./resources/version.mjs";
/**
 * API Client for interfacing with the Paymanai API.
 */
export class Paymanai extends Core.APIClient {
    /**
     * API Client for interfacing with the Paymanai API.
     *
     * @param {string | undefined} [opts.xPaymanAPISecret=process.env['PAYMAN_API_SECRET'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['PAYMANAI_BASE_URL'] ?? https://agent.payman.ai/api] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('PAYMANAI_BASE_URL'), xPaymanAPISecret = Core.readEnv('PAYMAN_API_SECRET'), ...opts } = {}) {
        if (xPaymanAPISecret === undefined) {
            throw new Errors.PaymanaiError("The PAYMAN_API_SECRET environment variable is missing or empty; either provide it, or instantiate the Paymanai client with an xPaymanAPISecret option, like new Paymanai({ xPaymanAPISecret: 'My X Payman API Secret' }).");
        }
        const options = {
            xPaymanAPISecret,
            ...opts,
            baseURL: baseURL || `https://agent.payman.ai/api`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.version = new API.Version(this);
        this.me = new API.Me(this);
        this.balances = new API.Balances(this);
        this.payments = new API.Payments(this);
        this.spendLimits = new API.SpendLimits(this);
        this._options = options;
        this.xPaymanAPISecret = xPaymanAPISecret;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            Accept: 'application/vnd.payman.v1+json',
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { 'x-payman-api-secret': this.xPaymanAPISecret };
    }
}
_a = Paymanai;
Paymanai.Paymanai = _a;
Paymanai.DEFAULT_TIMEOUT = 60000; // 1 minute
Paymanai.PaymanaiError = Errors.PaymanaiError;
Paymanai.APIError = Errors.APIError;
Paymanai.APIConnectionError = Errors.APIConnectionError;
Paymanai.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Paymanai.APIUserAbortError = Errors.APIUserAbortError;
Paymanai.NotFoundError = Errors.NotFoundError;
Paymanai.ConflictError = Errors.ConflictError;
Paymanai.RateLimitError = Errors.RateLimitError;
Paymanai.BadRequestError = Errors.BadRequestError;
Paymanai.AuthenticationError = Errors.AuthenticationError;
Paymanai.InternalServerError = Errors.InternalServerError;
Paymanai.PermissionDeniedError = Errors.PermissionDeniedError;
Paymanai.UnprocessableEntityError = Errors.UnprocessableEntityError;
Paymanai.toFile = Uploads.toFile;
Paymanai.fileFromPath = Uploads.fileFromPath;
Paymanai.Version = Version;
Paymanai.Me = Me;
Paymanai.Balances = Balances;
Paymanai.Payments = Payments;
Paymanai.SpendLimits = SpendLimits;
export { toFile, fileFromPath } from "./uploads.mjs";
export { PaymanaiError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Paymanai;
//# sourceMappingURL=index.mjs.map