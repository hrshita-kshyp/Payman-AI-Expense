import { type Agent } from "./_shims/index.js";
import * as Core from "./core.js";
import * as Errors from "./error.js";
import * as Uploads from "./uploads.js";
import * as API from "./resources/index.js";
import { Balances } from "./resources/balances.js";
import { Me } from "./resources/me.js";
import { PaymentCreatePayeeParams, PaymentCreatePayeeResponse, PaymentDeletePayeeResponse, PaymentSearchPayeesParams, PaymentSearchPayeesResponse, PaymentSendPaymentParams, PaymentSendPaymentResponse, Payments } from "./resources/payments.js";
import { SpendLimits } from "./resources/spend-limits.js";
import { Version } from "./resources/version.js";
export interface ClientOptions {
    /**
     * Defaults to process.env['PAYMAN_API_SECRET'].
     */
    xPaymanAPISecret?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['PAYMANAI_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     */
    timeout?: number | undefined;
    /**
     * An HTTP agent used to manage HTTP(S) connections.
     *
     * If not provided, an agent will be constructed by default in the Node.js environment,
     * otherwise no agent is used.
     */
    httpAgent?: Agent | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
     * defined globally.
     */
    fetch?: Core.Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 2
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `undefined` or `null` in request options.
     */
    defaultHeaders?: Core.Headers | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Core.DefaultQuery | undefined;
}
/**
 * API Client for interfacing with the Paymanai API.
 */
export declare class Paymanai extends Core.APIClient {
    xPaymanAPISecret: string;
    private _options;
    /**
     * API Client for interfacing with the Paymanai API.
     *
     * @param {string | undefined} [opts.xPaymanAPISecret=process.env['PAYMAN_API_SECRET'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['PAYMANAI_BASE_URL'] ?? https://agent.payman.ai/api] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, xPaymanAPISecret, ...opts }?: ClientOptions);
    version: API.Version;
    me: API.Me;
    balances: API.Balances;
    payments: API.Payments;
    spendLimits: API.SpendLimits;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected authHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    static Paymanai: typeof Paymanai;
    static DEFAULT_TIMEOUT: number;
    static PaymanaiError: typeof Errors.PaymanaiError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    static fileFromPath: typeof Uploads.fileFromPath;
}
export declare namespace Paymanai {
    export type RequestOptions = Core.RequestOptions;
    export { Version as Version };
    export { Me as Me };
    export { Balances as Balances };
    export { Payments as Payments, type PaymentCreatePayeeResponse as PaymentCreatePayeeResponse, type PaymentDeletePayeeResponse as PaymentDeletePayeeResponse, type PaymentSearchPayeesResponse as PaymentSearchPayeesResponse, type PaymentSendPaymentResponse as PaymentSendPaymentResponse, type PaymentCreatePayeeParams as PaymentCreatePayeeParams, type PaymentSearchPayeesParams as PaymentSearchPayeesParams, type PaymentSendPaymentParams as PaymentSendPaymentParams, };
    export { SpendLimits as SpendLimits };
}
export { toFile, fileFromPath } from "./uploads.js";
export { PaymanaiError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.js";
export default Paymanai;
//# sourceMappingURL=index.d.ts.map